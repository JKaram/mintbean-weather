{"version":3,"sources":["ori_3488361_442578d19f292a7e23ef9c56e5afe4291487d5e3_vector-clouds-weather-seamless-pattern.jpg","components/KH8F.gif","components/Loading.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","style","textAlign","src","gif","alt","width","height","Results","props","console","log","Wrapper","name","City","Current","Icon","currentWeather","icon","description","Stat","display","margin","Math","round","temp","humidity","windSpeed","styled","div","h2","img","GlobalStyle","createGlobalStyle","jpc","App","useState","loading","pressure","temp_max","temp_min","state","setState","searchBox","setSearchBox","token","process","getWeather","text","a","axios","get","current","getForcast","forcast","search","prevState","Promise","all","weatherData","forcastResult","data","main","wind","speed","weather","list","setTimeout","useEffect","maxWidth","onSubmit","e","preventDefault","SearchBar","type","onChange","target","value","placeholder","SearchBtn","onClick","input","button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f0e4983.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ori_3488361_442578d19f292a7e23ef9c56e5afe4291487d5e3_vector-clouds-weather-seamless-pattern.d7603347.jpg\";","module.exports = __webpack_public_path__ + \"static/media/KH8F.e640a2d6.gif\";","import React from \"react\";\nimport gif from \"./KH8F.gif\";\n\nexport const Loading = () => {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <img src={gif} alt=\"loading\" width=\"200\" height=\"200\" />\n    </div>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport default function Results(props) {\n  console.log(props);\n\n  return (\n    <Wrapper>\n      {!props.name && \"Sorry Try Again\"}\n      {props.name && (\n        <>\n          <City>{props.name}</City>\n          <Current>\n            <Icon\n              src={`http://openweathermap.org/img/wn/${props.currentWeather.icon}@2x.png`}\n              alt={props.currentWeather.description}\n            />\n            <Stat>{props.currentWeather.description}</Stat>\n            <div style={{ display: \"flex\", margin: \"20px 0\" }}>\n              <Stat>\n                <div>Temp</div>\n                <div>{Math.round(props.currentWeather.temp)}&#176;</div>\n              </Stat>\n              <Stat>\n                <div>Humidity</div>\n                <div>{props.currentWeather.humidity}%</div>\n              </Stat>\n              <Stat>\n                <div>Wind Speed</div>\n                <div>{props.currentWeather.windSpeed}</div>\n              </Stat>\n            </div>\n          </Current>\n        </>\n      )}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  max-width: 800px;\n  width: 100%;\n  margin: 30px auto 0;\n  background: #fff;\n  -webkit-box-shadow: 0 8px 6px -6px black;\n  -moz-box-shadow: 0 8px 6px -6px black;\n  box-shadow: 0 8px 6px -6px black;\n`;\nconst Current = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 auto;\n  max-width: 400px;\n  width: 100%;\n`;\nconst City = styled.h2`\n  text-align: center;\n  font-size: 40px;\n  padding-top: 20px;\n  margin: 0;\n`;\n\nconst Icon = styled.img`\n  width: 100px;\n`;\n\nconst Stat = styled.div`\n  font-size: 24px;\n  margin: 0 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  white-space: nowrap;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport axios from \"axios\";\nimport jpc from \"./ori_3488361_442578d19f292a7e23ef9c56e5afe4291487d5e3_vector-clouds-weather-seamless-pattern.jpg\";\n\nimport { Loading } from \"./components/Loading\";\nimport Results from \"./components/Results\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #efefef;\n    min-height: 100vh;\n    margin: 0;\n    font-family: 'Quicksand', sans-serif;\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    \n  }\n\n  body::after {\n  content: \"\";\n  background-image: url(${jpc});\n  background-repeat: repeat;\n  opacity: 0.3;\n  z-index: -1;\n    top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  position: absolute;\n  z-index: -1;      \n}\n`;\nconst filterForcast = (arr) => {\n  return arr[0][\"dt_txt\"];\n};\n\nfunction App() {\n  const [state, setState] = useState({\n    loading: false,\n    name: null,\n    currentWeather: {\n      humidity: null,\n      pressure: null,\n      temp: null,\n      temp_max: null,\n      temp_min: null,\n      windSpeed: null,\n      description: null,\n      icon: null,\n    },\n  });\n  const [searchBox, setSearchBox] = useState(\"Toronto\");\n  const token = process.env.REACT_APP_OPEN_WEATHER_API_KEY;\n\n  const getWeather = async (text) => {\n    const current = await axios.get(\n      `http://api.openweathermap.org/data/2.5/weather?q=${searchBox}&units=metric&appid=${token}`\n    );\n\n    return current;\n  };\n\n  const getForcast = async (text) => {\n    const forcast = await axios.get(\n      `http://api.openweathermap.org/data/2.5/forecast?q=${searchBox}&units=metric&appid=${token}`\n    );\n\n    return forcast;\n  };\n\n  const search = async (text) => {\n    setState((prevState) => ({\n      ...prevState,\n      loading: true,\n    }));\n    let [weatherData, forcastResult] = await Promise.all([\n      getWeather(text),\n      getForcast(text),\n    ]);\n\n    setState((prevState) => ({\n      ...prevState,\n      name: weatherData.data.name,\n      currentWeather: {\n        humidity: weatherData.data.main.humidity,\n        pressure: weatherData.data.main.pressure,\n        temp: weatherData.data.main.temp,\n        windSpeed: weatherData.data.wind.speed,\n        description: weatherData.data.weather[0].description,\n        icon: weatherData.data.weather[0].icon,\n      },\n    }));\n\n    console.log(filterForcast(forcastResult.data.list));\n\n    setTimeout(function () {\n      setState((prevState) => ({\n        ...prevState,\n        loading: false,\n      }));\n    }, 2100);\n  };\n\n  useEffect(() => {\n    search(searchBox);\n\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div>\n      <GlobalStyle />\n      <form\n        style={{\n          display: \"flex\",\n          maxWidth: \"600px\",\n          width: \"100%\",\n          margin: \"80px auto 30px\",\n        }}\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <SearchBar\n          type=\"text\"\n          name=\"name\"\n          onChange={(e) => setSearchBox(e.target.value)}\n          placeholder=\"Search for a city\"\n        />\n\n        <SearchBtn onClick={search}>Search</SearchBtn>\n      </form>\n\n      <div>\n        {state.loading && <Loading />}\n        {!state.loading && state.name && (\n          <Results name={state.name} currentWeather={state.currentWeather} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst SearchBar = styled.input`\n  padding: 10px;\n  font-size: 17px;\n  border: 1px solid grey;\n  float: left;\n  max-width: 400px;\n  width: 80%;\n  background: #ffff;\n`;\n\nconst SearchBtn = styled.button`\n  float: left;\n  padding: 10px;\n  width: 20%;\n  background: #2196f3;\n  color: white;\n  font-size: 17px;\n  border: 1px solid grey;\n  border-left: none; /* Prevent double borders */\n  cursor: pointer;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}